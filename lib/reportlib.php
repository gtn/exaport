<?php
// This file is part of Exabis Eportfolio (extension for Moodle)
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
// (c) 2016 GTN - Global Training Network GmbH <office@gtn-solutions.com>.

//require_once __DIR__.'/classes/fpdf.php';
require_once $CFG->dirroot.'/lib/tcpdf/tcpdf.php';

class exaportTCPDF extends TCPDF {

    public $viewMetaData = null;
    private $workingPage = 1;

    public function __construct($orientation='P', $unit='mm', $format='A4', $unicode=true, $encoding='UTF-8', $diskcache=false, $pdfa=false, $view = null)
    {
        if ($view) {
            $this->viewMetaData = $view;
        }
        return parent::__construct($orientation, $unit, $format, $unicode, $encoding, $diskcache, $pdfa);
    }

    protected function setHeader() {
        if ($this->getPage() == 1) {
            return ; // do not add pahe header into first page. Header of the first page is the common content
        }
        return parent::setHeader();
    }

    //Page header
    public function Header() {
        // Line
        $style = array('width' => 0.25, 'cap' => 'round', 'join' => 'round', 'dash' => '0', 'phase' => 0, 'color' => array(240));
        $pageParams = $this->getPageDimensions(1);
        // line
        $baseLineY = 7;
        $this->Line(-10, $baseLineY, $pageParams['wk'] + 10, $baseLineY, $style);
        // view title:
        $name = $this->getViewMetaData()->name;
        $widthText = $pageParams['wk'] - $pageParams['rm'] - 5;
        $this->SetTextColor(200, 200, 200);
        $this->SetFont('helvetica', '', 10);
        $textHeight = $this->getStringHeight($widthText, $name);
        $this->SetY($baseLineY - $textHeight, false);
        $this->Cell($widthText, 0, $name, 0, 0, 'R');

        // lines for margins (developing)
//        $style = array('width' => 1, 'cap' => 'round', 'join' => 'round', 'dash' => '0', 'phase' => 0, 'color' => array(250, 0, 0));
//        $this->Line(-10, 15, $pageParams['wk'] + 10, 15, $style);

    }

    // Page footer
    public function Footer() {
        $pageParams = $this->getPageDimensions(1);
        $baseLineY = $pageParams['hk'] - 15;
        $this->SetTextColor(170, 170, 170);
        $this->SetFont('helvetica', '', 10);
        $zeroX = $this->GetX();

        // Position at 15 mm from bottom
        $this->SetY($baseLineY, false);
        // Line
        $style = array('width' => 0.25, 'cap' => 'round', 'join' => 'round', 'dash' => '0', 'phase' => 0, 'color' => array(170));
        $this->Line(-10, $baseLineY, $pageParams['wk'] + 10, $baseLineY, $style);
        // current date
        $this->Cell(0, 0, date('d.m.Y'), 0, false, 'L', 0, '', 0, false, 'T', 'M');
        $this->SetX($zeroX);
        // Page number
        $this->Cell(0, 0, $this->getAliasNumPage().'/'.$this->getAliasNbPages(), 0, false, 'C', 0, '', 0, false, 'T', 'M');
        $this->SetX($zeroX);
        // generated
        $this->Cell(0, 0, 'Generated by exabis ePortfolio', 0, false, 'R', 0, '', 0, false, 'T', 'M');
        $this->SetX($zeroX);
    }

    public function Output($name = 'doc.pdf', $dest = 'I')
    {
        $this->tcpdflink = false; // to delete extra empty page
        return parent::Output($name, $dest);
    }

    public function fillMetaData($view)
    {
        $this->viewMetaData = $view;
    }

    public function getViewMetaData()
    {
        return $this->viewMetaData;
    }

    public function getWorkingPage()
    {
        return $this->workingPage;
    }

    public function setWorkingPage($page)
    {
        $this->workingPage = $this->page;
    }

    public function setPage($pnum, $resetmargins = false)
    {
        $this->workingPage = $pnum;
        return parent::setPage($pnum, $resetmargins);
    }

}

class ExaportVievPdf {

    /** @var null TCPDF */
    private $pdf = null;

    private $yTopPosition = 15;

    private $firstPageTopMargin = 5;

    private $pageTopMargin = 15;
    private $pageBottomMargin = 15;
    private $pageLeftMargin = 5;
    private $pageRightMargin = 5;

    private $mainFontSize = 10;
    private $mainFontName = 'helvetica';

    private $columnHights = [];

    private $currentY = 0;

    private $verticalMarginAfterBlock = 5;
    private $maxThumbnailHeight = 15;
    private $maxThumbnailWidth = 20;

    private $orientation = 'P';
    private $format = 'A4';

    private $firstPageForMainReportData = 1;

    private $viewMetaData = null;

    private $pageAdded = false;

    public function __construct($view = null)
    {

        // create new PDF document
        $this->pdf = new exaportTCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false, false, $view);
        // set document properties
        $this->pdf->SetCreator(PDF_CREATOR);
        $this->pdf->SetAuthor('Moodle "Exabis ePortfolio" block'); // TODO: username?
        $this->pdf->SetTitle('Exaport view');
        $this->pdf->SetSubject('Exaport view');
        // remove default header/footer
//        $this->pdf->setPrintHeader(false);
//        $this->pdf->setPrintFooter(false);

        // set default header data
        $this->pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, PDF_HEADER_TITLE, PDF_HEADER_STRING);

        // set header and footer fonts
        $this->pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
        $this->pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

        // set default monospaced font
        $this->pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);
        // set margins
        $this->pdf->SetMargins($this->pageLeftMargin, $this->pageTopMargin, $this->pageRightMargin);
        // set auto page breaks
        $this->pdf->SetAutoPageBreak(TRUE, $this->pageBottomMargin);
        // set image scale factor
        $this->pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);
        // default fill color
        $this->pdf->SetFillColor(255, 255, 255);

    }

    /**
     * @param $layout
     * @param int $columnInd note: indexes are from 1
     * @param int $factValueFromSource
     * @return float
     */
    function getColumnWidth($layout, $columnInd = 1, $factValueFromSource = 0) {
        $widths = [
            1 => [100],
            2 => [50, 50],
            3 => [67, 33],
            4 => [33, 67],
            5 => [33, 33, 33],
            6 => [25, 50, 25],
            7 => [14, 70, 15],
            8 => [25, 25, 25, 25],
            9 => [20, 30, 30, 20],
            10 => [20, 20, 20, 20, 20],
        ];
        $resultPercent = @$widths[$layout][$columnInd - 1];
        if ($factValueFromSource) {
            return round($factValueFromSource * $resultPercent / 100);
        }
        return $resultPercent;
    }

    // Function to test tcpdf functionalities. Rename it to "generateView" and change name of original "generateView" to some other
    function genarateViewDev($layout, $columnsWithBlocks, $access) {

        // set font
        $this->setDefaultFont();
        // add first page
        $this->addDefaultPage();

        $h = 23;

        $pageHeight = $this->pdf->getPageDimensions(1)['hk'] - $this->pdf->getPageDimensions(1)['bm'] - $this->pdf->getPageDimensions(1)['tm']; // from first page?
        $pageLimit = 4;
        $currentPage = $this->pdf->getPage();

        while ($h <= 1000 && $currentPage <= $pageLimit) {
//            $this->pdf->MultiCell(50, 0, $this->pdf->GetY(), 0, 'L', false, 1, 20, $h, true);
            $blockH = $this->writeHTMLCellReturnHeight(80, 20, $h, $h.'<br>'.str_repeat('<br>', rand(2, 7)));
//            $h += 20;
            $h = $this->increaseBlockY($h, $blockH);
            if ($h > $pageHeight) {
                $h = 20;
                $this->addDefaultPage();
                $currentPage++;// = $this->pdf->getPage();
                $this->pdf->setPage($currentPage);
            }
        }

        $this->pdf->Output('myview.pdf', 'I');

    }

    function genarateView($layout, $columnsWithBlocks, $access) {
        global $DB;

        $this->pdf->setHtmlVSpace(
            array(
                // 0 - for start tag; 1 - for end tag 
                // h - how big; n - how many used 'h'
                'p' => array(0 => array('h' => 0.1, 'n' => 1), 1 => array('h' => 0.1, 'n' => 1)),
                'a' => array(0 => array('h' => 0.1, 'n' => 1), 1 => array('h' => 0.1, 'n' => 1)),
                'ul' => array(0 => array('h' => 0.1, 'n' => 10), 1 => array('h' => 0.1, 'n' => 10)),
                'li' => array(0 => array('h' => 0.1, 'n' => 10), 1 => array('h' => 0.1, 'n' => 10)),
            )
        );

        // set font
        $this->setDefaultFont();
        // add a page
        $this->addDefaultPage();

        // get view from first block
        $firstBlock = @$columnsWithBlocks[1][0];
        if (!$firstBlock) {
            return 'no any block added yet';
        }
        $view = $DB->get_record("block_exaportview", array("id" => $firstBlock->viewid));
        if (!$this->pdf->viewMetaData) {
            $this->fillViewMetaData($view);
        }

        // background
//        $this->pdf->SetFillColor(200, 200, 200, -1);
//        $this->pdf->Rect(0, 0, $this->pdf->getPageWidth(), $this->pdf->getPageHeight(), 'DF', "");

        $this->addFirstPageHeader();

        $this->firstPageForMainReportData = $this->pdf->getPage(); // for the case with very big view description

        // get current vertical position
        $yOriginal = $this->currentY;

        $columnsMargin = 5;
        if (count($columnsWithBlocks) == 1) {
            $columnsMargin = 0;
        }
        $pageWidth = $this->pdf->getPageWidth() - $this->pageLeftMargin - $this->pageRightMargin;

        foreach ($columnsWithBlocks as $columnI => $columnBlocks) {
            $this->columnHights[$columnI] = $yOriginal;
            $columnWidth = round($this->getColumnWidth($layout, $columnI, $pageWidth) - ($columnsMargin / 2));
            $this->pdf->setPage($this->firstPageForMainReportData); // always return to first page
            $this->pdf->setY($yOriginal, false);
            $this->currentY = $yOriginal;
            $y = $yOriginal;
            $xStartColumn = ($columnWidth + $columnsMargin) * ($columnI - 1) + $columnsMargin;
            foreach ($columnBlocks as $blockI => $block) {
//                $yBlockStart = $this->pdf->GetY();
                $ln = 1;
                if ($blockI == (count($columnBlocks) - 1)) { // for last block
                    $ln = 0;
                }
                $this->setWorkingPage($this->pdf->getPage());
                $this->pdf->MultiCell($columnWidth, 0, ' ', 0, 'J', false, 0, $xStartColumn+25, $this->currentY, true); // Hack. restore some pdf behaviour
//                if ($this->pageAdded) {
//                    $this->increaseBlockY($this->currentY, 2);
//                    $this->pageAdded = false;
//                }
                $this->getViewBlockContent($columnI, $block, $access, $columnWidth, $xStartColumn, $this->currentY, $ln);

            }

        }

        $this->pdf->Output('myview.pdf', 'I');

    }

    // template of block title
    public function addBlockName($name, $columnWidth) {
        $origFontSize = $this->pdf->getFontSizePt();
        $origFontStyle = $this->pdf->getFontStyle();
        $this->pdf->SetFontSize($this->mainFontSize + 3);
        $this->pdf->SetFont($this->titlesFontName, 'B');
        $name = $this->cleanHtmlContent($name);
        $this->pdf->Cell($columnWidth, 0, $name, 0, 1, 'J', true, '', 0, false, 'T', 'T');
        // return fonts
        $this->pdf->SetFont('helvetica', $origFontStyle, $origFontSize);
    }


    public function getViewBlockContent($columnI, $block, $access, $columnWidth, $x, $y, $ln) {
        global $USER, $CFG, $DB, $OUTPUT;
        $content = '';
        $view = $DB->get_record("block_exaportview", array("id" => $block->viewid));

        if ($block->text) {
            $block->text = file_rewrite_pluginfile_urls($block->text, 'pluginfile.php', context_user::instance($USER->id)->id, 'block_exaport', 'view_content', $access);
            $block->text = $this->cleanHtmlContent($block->text);
        }

        switch ($block->type) {
            case 'item':
                $item = $block->item;
                $yBeforeBlockInserted = $y;
                $yBlockOriginal = $y;
                $yBlockCurrent = $this->increaseBlockY(0, $y); // this Y used for every block, but can decrease if the new page is added
                $heightBlockCurrent = 0;

                // link to web-preview
                $linked = false;
                $blockHref = $CFG->wwwroot.'/blocks/exaport/shared_item.php?access=view/'.$access.'&itemid='.$item->id.'&att='.$item->attachment;

                if ($item->name) {
                    $headHight = $this->addHeadLine(strip_tags($item->name), $x, $yBlockCurrent, $columnWidth, 0, null, true, 'L', $blockHref);
                    $heightBlockCurrent += $headHight;
                    $yBlockCurrent = $this->increaseBlockY($yBlockCurrent, $headHight);
                    $linked = true;
                }

                switch($item->type) {
                    case 'file':
                        $fileLinks = [];
                        $select = "contextid='".context_user::instance($item->userid)->id."' ".
                            " AND component='block_exaport' AND filearea='item_file' AND itemid='".$item->id."' AND filesize>0 ";
                        if ($files = $DB->get_records_select('files', $select, null, 'id, filename, mimetype, filesize')) {
                            if (is_array($files)) {
                                $imgs = [];
                                $imgWs = [];
                                $imHs = [];
//                                $width = 100;
                                $maxWidth = $maxHeight = $columnWidth / count($files);
                                $maxHeight = ($maxHeight > $this->maxThumbnailHeight ? $this->maxThumbnailHeight : $maxHeight);
                                $fileIndex = 1;
                                foreach ($files as $file) {
                                    if (strpos($file->mimetype, "image") !== false) {
                                        $imgsrc = moodle_url::make_pluginfile_url(context_user::instance($item->userid)->id, 'block_exaport', 'item_file/view/'.$access.'/itemid', $item->id, '/', $file->filename, false, false)->out();
                                        $imgsrc .= '/forPdf/'.$view->hash.'/'.$view->id.'/'.$USER->id; // images are got from PHP pdf generator, so they are not logged in as FE-user
                                        // file thumbnail
                                        // get list of images with sizes:
                                        $imgX = $x + $columnWidth - ($maxWidth * $fileIndex);
                                        list($imgWs[], $imHs[], $imgs[]) = $this->addImageBySrc($imgsrc, $imgX, $yBlockCurrent, $maxWidth, $maxHeight, '', false);
                                    } else {
                                        // get data for Fileinfo block.
                                        // Link to the file.
                                        $ffurl = s("{$CFG->wwwroot}/blocks/exaport/portfoliofile.php?access=view/".$access."&itemid=".$item->id."&inst=".$file->pathnamehash);
                                        // Human filesizes.
                                        $units = array('B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB');
                                        $power = $file->filesize > 0 ? floor(log($file->filesize, 1024)) : 0;
                                        $filesize = number_format($file->filesize / pow(1024, $power), 2, '.', ',').' '.$units[$power];
                                        $fileLinks[$file->filename] = [
                                            'url' => $ffurl,
                                            'size' => $filesize,
                                            'iconShown' => false,
                                        ];
                                        // if icon is possible
                                        // not for pdf?
                                        /*if (block_exaport_is_valid_media_by_filename($file->filename)) {
                                            $fileLinks[$file->filename]['iconShown'] = true;
                                            $iconSrc = $OUTPUT->image_url(file_mimetype_icon($file->mimetype, 256))->out();
                                            $imgX = $x + $columnWidth - ($maxWidth * $fileIndex);
                                            list($imgWs[], $imHs[], $imgs[]) = $this->addImageBySrc($iconSrc, $imgX, $yBlockCurrent, $maxWidth, $maxHeight, $ffurl, false);
                                        }*/
                                    };
                                    $fileIndex++;
                                }
                                $heightBlockCurrent += max($imHs);
                                $currPage = $this->pdf->getPage();
                                $yBlockCurrent = $this->increaseBlockY($yBlockCurrent, max($imHs));
                                $pageChangedByImage = ($currPage != $this->pdf->getPage());
                                if ($pageChangedByImage) { // inserted image added new page
                                    $yBlockCurrent = $this->yTopPosition;
                                    $this->currentY = $this->yTopPosition;
                                }
                                if ($item->id == 50) {
                                    $this->pdf->Circle(150, $yBlockCurrent, 2);
                                }
                                // add file links (list)
                                if (count($fileLinks) > 0) {
                                    $linkscontent = '<p>';
                                    foreach ($fileLinks as $fName => $fData) {
                                        $linkscontent .= '<a style="text-decoration: none;" href="'.$fData['url'].'">'.$fName.'</a> ('.$fData['size'].')';
                                    }
                                    $linkscontent .= '</p>';
                                    $cellHight = $this->writeHTMLCellReturnHeight($columnWidth, $x, $yBlockCurrent, $linkscontent);
                                    $heightBlockCurrent += $cellHight;
                                    $yBlockCurrent = $this->increaseBlockY($yBlockCurrent, $cellHight);
                                    if ($item->id == 50) {
                                        echo "<pre>debug:<strong>reportlib.php:433</strong>\r\n"; print_r($cellHight); echo '</pre>'; exit; // !!!!!!!!!! delete it
                                    }
                                }
                            }
                        }
                        if ($item->id == 50) {
                            $this->pdf->Circle(150, $yBlockCurrent, 2);
                        }
                        break;
                    case 'link':
                        $thumbnailPartWidth = round($columnWidth / 4);

                        $thumbUrl = $CFG->wwwroot.'/blocks/exaport/item_thumb.php?item_id='.$item->id.'&access='.$access.'&ispdf=1&vhash='.$view->hash.'&vid='.$view->id.'&uid='.$USER->id;

                        // item thumbnail
                        if (list($imgW, $imH) = $this->addImageBySrc($thumbUrl, $x + $columnWidth - $thumbnailPartWidth, $yBlockCurrent, $this->maxThumbnailWidth, $this->maxThumbnailHeight, $item->url)) {
                            $textContentWidth = $columnWidth - $thumbnailPartWidth;
                        } else {
                            // no image
                            $textContentWidth = $columnWidth;
                        }

                        $urlText = '<a style="text-decoration: none;" href="'.$item->url.'">'.$item->url.'</a>';
                        $cellHight = $this->writeHTMLCellReturnHeight($textContentWidth, $x, $yBlockCurrent, $urlText);
                        $item->url = false; // DISABLE for next adding
                        if ($imH > $cellHight) {
                            $yBlockCurrent = $this->increaseBlockY($yBlockCurrent, $imH);
                            $heightBlockCurrent += $imH;
                        } else {
                            $yBlockCurrent = $this->increaseBlockY($yBlockCurrent, $cellHight);
                            $heightBlockCurrent += $cellHight;
                        }

                        break;
                    default:

                }
                // item url
                if ($item->url && $item->url != "false") {
                    // Link.
                    $this->pdf->SetXY($x, $yBlockCurrent);
                    $cellHight = $this->pdf->getStringHeight($columnWidth, $item->url);
                    $this->pdf->Cell($columnWidth, 0, $item->url, 0, 1, 'J', true, $item->url, 0, false, 'T', 'M');
                    $yBlockCurrent = $this->increaseBlockY($yBlockCurrent, $cellHight);
                    $heightBlockCurrent += $cellHight;
                }
                // description
                $intro = trim($item->intro);
                if ($intro) {
                    $cellHight = 0;
                    if (strpos($intro, '<iframe') !== false) {
                        // embeded media
                        $dom = new DOMDocument;
                        $dom->loadHTML($intro);
                        $iframeElement = $dom->getElementsByTagName('iframe')->item(0);
                        $src = $iframeElement->getAttribute("src");
                        if ($src) {
                            $srcText = '<a style="text-decoration: none;" href="'.$src.'">'.$src.'</a>';
                            $cellHight = $this->writeHTMLCellReturnHeight($columnWidth, $x, $yBlockCurrent, $srcText);
                        }
                    } else {
                        // common html
                        $intro = file_rewrite_pluginfile_urls($intro, 'pluginfile.php', context_user::instance($item->userid)->id,
                            'block_exaport', 'item_content', 'view/' . $access . '/itemid/' . $item->id);
                        $intro = $this->convertHtmlToPdfHtml($intro);
                        $cellHight = $this->writeHTMLCellReturnHeight($columnWidth, $x, $yBlockCurrent, $intro);
                    }
                    $yBlockCurrent = $this->increaseBlockY($yBlockCurrent, $cellHight);
                    $heightBlockCurrent += $cellHight;
                }

                // add link to block web-view if it is not linked in title
                if (!$linked) {
                    $href = $CFG->wwwroot . '/blocks/exaport/shared_item.php?access=view/' . $access . '&itemid=' . $item->id . '&att=' . $item->attachment;
                    $linkHeight = $this->addLinkToBlock($blockHref, $x, $yBlockCurrent);
                    $yBlockCurrent = $this->increaseBlockY($yBlockCurrent, $linkHeight);
                    $heightBlockCurrent += $linkHeight;
                }

//                $this->increaseY($heightBlockCurrent);
                // bottom block margin
                $this->increaseY($this->verticalMarginAfterBlock);
                break;

            case 'personal_information':
                $heightBlockCurrent = 0;
                $yBlockCurrent = $y;
                if ($block->block_title) {
                    $headHeight = $this->addHeadLine(strip_tags($block->block_title), $x, $y, $columnWidth);
                    $heightBlockCurrent += $headHeight;
                    $yBlockCurrent = $this->increaseBlockY($yBlockCurrent, $headHeight);
                }
                // picture
                $textContentWidth = $columnWidth;
                $imgH = 0;
                if (isset($block->picture)) {
                    // pictureWidth = 50%; ???
                    $picturePartWidth = round($columnWidth / 4);
                    $imgSrc = $block->picture;
                    $currPage = $this->pdf->getPage();
                    list($imgW, $imgH) = $this->addImageBySrc($imgSrc, $x + $columnWidth - $picturePartWidth, $yBlockCurrent, $picturePartWidth, 30, '');
                    $pageChangedByImage = ($currPage != $this->pdf->getPage());
                    if ($pageChangedByImage) { // inserted image added new page
                        $yBlockCurrent = $this->yTopPosition;
                        $this->currentY = $this->yTopPosition;
                    }
                }
                $personInfo = [];
                $name = '';
                if (isset($block->firstname)) {
                    $name .= $block->firstname;
                }
                if (isset($block->lastname)) {
                    $name .= ' '.$block->lastname;
                }
                $name = trim($name);
                $personInfo['name'] = $name;

                if (isset($block->email)) {
                    $personInfo['email'] = $block->email;
                }
                if (isset($block->text)) {
                    $personInfo['description'] = $block->text;//strip_tags($block->text);
                }
                $fullTextHeight = 0;
                foreach ($personInfo as $key => $infoItem) {
                    $cellHight = $this->pdf->getStringHeight($columnWidth, $infoItem);
                    switch ($key) {
                        case 'name':
                            $this->pdf->SetFont($this->mainFontName, 'B', $this->mainFontSize + 1);
                            $this->pdf->MultiCell($textContentWidth, 0, $infoItem, 0, 'L', true, 0, $x, $yBlockCurrent, false, 0, false, true, 0, 'T', false);
                            $this->setDefaultFont();
                            break;
                        case 'description':
                            $infoItem = $this->convertHtmlToPdfHtml($infoItem);
                            $cellHight = $this->writeHTMLCellReturnHeight($textContentWidth, $x, $yBlockCurrent, $infoItem);
                            break;
                        default:
                            $this->pdf->MultiCell($textContentWidth, 0, $infoItem, 0, 'J', true, 0, $x, $yBlockCurrent, false, 0, false, true, 0, 'T', false);
                    }
                    $yBlockCurrent = $this->increaseBlockY($yBlockCurrent, $cellHight);
                    $fullTextHeight += $cellHight;
                }
                if ($imgH > $fullTextHeight) {
                    $fullTextHeight = $imgH;
                }
                $heightBlockCurrent += $fullTextHeight;

                $this->increaseY($heightBlockCurrent);
                // bottom block margin
                $this->increaseY($this->verticalMarginAfterBlock);
                break;
            case 'headline':
                $yBlockCurrent = $y;
                $lineHeight = $this->addHeadLine(strip_tags($block->text), $x, $y, $columnWidth);
                $yBlockCurrent = $this->increaseBlockY($yBlockCurrent, $lineHeight);
                $this->increaseY($lineHeight);
                break;
            case 'media':
                // really it is a NOTE artifact
                /*if ($block->block_title) {
                    $lineHeight = $this->addHeadLine(strip_tags($block->block_title), $x, $y, $columnWidth);
                    $this->increaseY($lineHeight);
                }*/
                break;
            case 'badge':
                $badges = block_exaport_get_all_user_badges($view->userid);
                if (count($badges) == 0) {
                    return false;
                }
                $badge = null;
                foreach ($badges as $tmp) {
                    if ($tmp->id == $block->itemid) {
                        $badge = $tmp;
                        break;
                    };
                };
                if (!$badge) {
                    // Badge not found.
                    return false;
                }
                $heightBlockCurrent = 0;
                $yBlockCurrent = $y;
                $headHeight = $this->addHeadLine(strip_tags($badge->name), $x, $y, $columnWidth);
                $yBlockCurrent = $this->increaseBlockY($yBlockCurrent, $headHeight);
                $heightBlockCurrent += $headHeight;
                $picturePartWidth = $columnWidth / 4;
                if (!$badge->courseid) { // For badges with courseid = NULL.
                    $badge->imageUrl = (string) moodle_url::make_pluginfile_url(1, 'badges', 'badgeimage', $badge->id, '/', 'f1', false);
                } else {
                    $context = context_course::instance($badge->courseid);
                    $badge->imageUrl = (string) moodle_url::make_pluginfile_url($context->id, 'badges', 'badgeimage', $badge->id, '/', 'f1', false);
                }
                $currPage = $this->pdf->getPage();
                list($imgW, $imgH) = $this->addImageBySrc($badge->imageUrl, $x + $columnWidth - $picturePartWidth, $yBlockCurrent, $picturePartWidth, 30, '');
                $pageChangedByImage = ($currPage != $this->pdf->getPage());
                if ($pageChangedByImage) { // inserted image added new page
                    $yBlockCurrent = $this->yTopPosition;
                    $this->currentY = $this->yTopPosition;
                }

                $description = $this->convertHtmlToPdfHtml($badge->description);
                $cellHight = $this->writeHTMLCellReturnHeight($columnWidth - $picturePartWidth, $x, $yBlockCurrent, $description);

                if ($cellHight < $imgH) {
                    $yBlockCurrent = $this->increaseBlockY($yBlockCurrent, $imgH);
                    $heightBlockCurrent += $imgH;
                } else {
                    $yBlockCurrent = $this->increaseBlockY($yBlockCurrent, $cellHight);
                    $heightBlockCurrent += $cellHight;
                }

                $this->increaseY($heightBlockCurrent);
                // bottom block margin
                $this->increaseY($this->verticalMarginAfterBlock);

                break;
            case 'cv_information':
                // CV information
                $heightBlockCurrent = 0;
                $yBlockCurrent = $y;
                $bodyContent = '';
                $attachments = [];
                $resume = block_exaport_get_resume_params($view->userid, true);
                switch ($block->resume_itemtype) {
                    case 'edu':
                        if ($block->itemid && $resume && $resume->educations[$block->itemid]) {
                            $itemData = $resume->educations[$block->itemid];
                            $attachments = $itemData->attachments;
                            $description = '';
                            $description .= $itemData->institution.': ';
                            $description .= $itemData->qualname;
                            if ($itemData->startdate != '' || $itemData->enddate != '') {
                                $description .= ' (';
                                if ($itemData->startdate != '') {
                                    $description .= $itemData->startdate;
                                }
                                if ($itemData->enddate != '') {
                                    $description .= ' - '.$itemData->enddate;
                                }
                                $description .= ')';
                            }
                            if ($itemData->qualdescription != '') {
                                $description .= '<br>'.$itemData->qualdescription;
                            }
                            $bodyContent .= $description;
                        }
                        break;
                    case 'employ':
                        if ($block->itemid && $resume && $resume->employments[$block->itemid]) {
                            $itemData = $resume->employments[$block->itemid];
                            $attachments = $itemData->attachments;
                            $description = '';
                            $description .= $itemData->jobtitle.': ';
                            $description .= $itemData->employer;
                            if ($itemData->startdate != '' || $itemData->enddate != '') {
                                $description .= ' (';
                                if ($itemData->startdate != '') {
                                    $description .= $itemData->startdate;
                                }
                                if ($itemData->enddate != '') {
                                    $description .= ' - '.$itemData->enddate;
                                }
                                $description .= ')';
                            }
                            if ($itemData->positiondescription != '') {
                                $description .= '<br>'.$itemData->positiondescription;
                            }
                            $bodyContent .= $description;
                        }
                        break;
                    case 'certif':
                        if ($block->itemid && $resume && $resume->certifications[$block->itemid]) {
                            $itemData = $resume->certifications[$block->itemid];
                            $attachments = $itemData->attachments;
                            $description = '';
                            $description .= $itemData->title.' ';
                            if ($itemData->date != '') {
                                $description .= '('.$itemData->date.')';
                            }
                            if ($itemData->description != '') {
                                $description .= '<br>'.$itemData->description;
                            }
                            $bodyContent = $description;
                        }
                        break;
                    case 'public':
                        if ($block->itemid && $resume && $resume->publications[$block->itemid]) {
                            $itemData = $resume->publications[$block->itemid];
                            $attachments = $itemData->attachments;
                            $description = '';
                            $description .= $itemData->title;
                            if ($itemData->contribution != '') {
                                $description .= ' ('.$itemData->contribution.')';
                            }
                            if ($itemData->date != '') {
                                $description .= '('.$itemData->date.')';
                            }
                            if ($itemData->contributiondetails != '' || $itemData->url != '') {
                                $description .= '<br>';
                                if ($itemData->contributiondetails != '') {
                                    $description .= $itemData->contributiondetails;
                                }
                                if ($itemData->url != '') {
                                    $description .= '<br /><a href="'.$itemData->url.'" target="_blank">'.$itemData->url.'</a>';
                                }
                            }
                            $bodyContent = $description;
                        }
                        break;
                    case 'mbrship':
                        if ($block->itemid && $resume && $resume->profmembershipments[$block->itemid]) {
                            $itemData = $resume->profmembershipments[$block->itemid];
                            $attachments = $itemData->attachments;
                            $description = '';
                            $description .= $itemData->title.' ';
                            if ($itemData->startdate != '' || $itemData->enddate != '') {
                                $description .= ' (';
                                if ($itemData->startdate != '') {
                                    $description .= $itemData->startdate;
                                }
                                if ($itemData->enddate != '') {
                                    $description .= ' - '.$itemData->enddate;
                                }
                                $description .= ')';
                            }
                            if ($itemData->description != '') {
                                $description .= '<br>'.$itemData->description;
                            }
                            $bodyContent = $description;
                        }
                        break;
                    case 'goalspersonal':
                    case 'goalsacademic':
                    case 'goalscareers':
                    case 'skillspersonal':
                    case 'skillsacademic':
                    case 'skillscareers':
                        $attachments = @$resume->{$block->resume_itemtype.'_attachments'};
                        $description = '';
                        if ($resume && $resume->{$block->resume_itemtype}) {
                            $description .= '<br>'.$resume->{$block->resume_itemtype}.' ';
                        }
                        $bodyContent = $description;
                        break;
                    case 'interests':
                        $description = '';
                        if ($resume->interests != '') {
                            $description .= $resume->interests;
                        }
                        $bodyContent = $description;
                        break;
                    default:
                        // no!
                }

                if ($attachments && is_array($attachments) && count($attachments) > 0 && $block->resume_withfiles) {
                    $bodyContent .= '<ul>';
                    foreach($attachments as $attachm) {
                        $bodyContent .= '<li><p><a href="'.$attachm['fileurl'].'" target="_blank">'.$attachm['filename'].'</a></p></li>';
                    }
                    $bodyContent .= '</ul>';
                }

                // if the resume item is empty - do not show
                $bodyContent = trim($bodyContent);
                if ($bodyContent != ''/* && 11==22*/) {
                    $text = $this->convertHtmlToPdfHtml($bodyContent);
                    $htmlHeight = $this->writeHTMLCellReturnHeight($columnWidth, $x, $yBlockCurrent, $text);
                    $yBlockCurrent = $this->increaseBlockY($yBlockCurrent, $htmlHeight);
                    $heightBlockCurrent += $htmlHeight;
                    $this->increaseY($heightBlockCurrent);
                    // bottom block margin
//                    $this->increaseY($this->verticalMarginAfterBlock);
                }
                break;

            default:
                // Text block
                $heightBlockCurrent = 0;
                $yBlockCurrent = $y;
                if ($block->block_title) {
                    $headHeight = $this->addHeadLine(strip_tags($block->block_title), $x, $y, $columnWidth);
                    $yBlockCurrent = $this->increaseBlockY($yBlockCurrent, $headHeight);
                    $heightBlockCurrent += $headHeight;
                }
                $text = $this->convertHtmlToPdfHtml($block->text);
                $htmlHeight = $this->writeHTMLCellReturnHeight($columnWidth, $x, $yBlockCurrent, $text);
                $yBlockCurrent = $this->increaseBlockY($yBlockCurrent, $htmlHeight);
                $heightBlockCurrent += $htmlHeight;
                $this->increaseY($heightBlockCurrent);
                // bottom block margin
                $this->increaseY($this->verticalMarginAfterBlock);

        }

//        if (@$item->id == 50) {
//            echo "<pre>debug:<strong>reportlib.php:830</strong>\r\n"; print_r($heightBlockCurrent); echo '</pre>'; exit; // !!!!!!!!!! delete it
//        }
    }

    function cleanHtmlContent($htmlContent = '') {
        $htmlContent = format_text($htmlContent, FORMAT_HTML);
        // TODO: !!! simplifire html
        return $htmlContent;
    }

    // used for position of next block
    function increaseY($addY = 0) {
        return true;
        $this->currentY += $addY;
        $pageHeight = $this->pdf->getPageDimensions($this->firstPageForMainReportData)['hk'] - $this->pdf->getPageDimensions($this->firstPageForMainReportData)['bm'] - $this->pdf->getPageDimensions($this->firstPageForMainReportData)['tm']; // from first page?

        if ($this->currentY >= $pageHeight) {
            $numPages = $this->pdf->getNumPages();
            $this->workingPage++;
            if ($this->workingPage > $numPages) {
                $this->addDefaultPage();
            }
            $this->pdf->setPage($this->workingPage);
            $this->currentY = $this->yTopPosition;
        }

    }

    // used for position of elements of the block
    function increaseBlockY($currentY, $addY = 0) {
//        return true;
        $devText = '';
        $devText .= $this->pdf->getPage().'p = ';

        $pageHeight = $this->pdf->getPageDimensions($this->firstPageForMainReportData)['hk'] - $this->pdf->getPageDimensions($this->firstPageForMainReportData)['bm'] - $this->pdf->getPageDimensions($this->firstPageForMainReportData)['tm']; // from first page?
        $currentPage = $this->pdf->getPage();
        $currentYBeforeChange = $currentY;
        $yBeforeIncreasing = $currentY;
        $newY = $currentY + $addY;

        if ($newY >= $pageHeight || $this->getWorkingPage() < $this->pdf->getPage()) {

            $newY = $newY - ($pageHeight - $yBeforeIncreasing); // delete part in the end of first page

            $currentPage = $currentPage + floor($newY / $pageHeight);

            $newY = $newY - ($pageHeight * floor($newY / $pageHeight)); // delete Remainder of heigh divided by page heigh

            $newY = round($newY);

//            if ($newY < $this->yTopPosition) {
                $newY = $newY + $this->yTopPosition;// + ($this->pdf->getStringHeight(100, '.') * 2);
//                $this->addDeveloperInfo('--'.round($newY).'--', 100, $newY);
//            }

            if ($this->pdf->getNumPages() < $currentPage) {
                $addPages = $currentPage - $this->pdf->getNumPages();
                for($i = 1; $i <= $addPages; $i++) {
                    $this->addDefaultPage();
                }
                $this->pageAdded = true;
            }
//            $currentPage++;
            $this->pdf->setPage($currentPage);
            $currentY = $newY;//$this->yTopPosition;
            $this->currentY = $newY;//$this->yTopPosition; // main y position is also must be changed!

            $devText .= ' new: '.$currentPage.'p = '.$this->currentY;
        }

//        $this->addDeveloperInfo('added: '.$addY, $this->pdf->GetX() - 5, $currentY);

        /*$this->pdf->SetTextColor(255, 0, 0);
        $yCurr = $this->pdf->GetY();
        $this->pdf->SetX(50 * ($this->pdf->getPage() - 1));
//        2p = 293.91952733333 new: 3p = 15 !!!!!!!!!!!!! <----
        $this->pdf->SetY($yCurr - 3, false);
        $this->pdf->Cell(200, 0, $devText);
        $this->setDefaultFont();
        $this->pdf->SetY($yCurr, false);*/

        $this->currentY = $newY;
        return $newY;

    }

    function addImageBySrc($src, $x, $y, $maxWidth = 0, $maxHeight = 0, $url = '', $hide = false)
    {
//        $maxHeight = 45; // <!------------------- !!!!!!!!!!!!!!!!!!!!! delete it !!!!!!!!!!!!!!! only for testing
        static $downloadedImages = null;
        if ($downloadedImages === null) {
            $downloadedImages = [];
        }
        /*if (!$hide && is_numeric($src)) {
            // add image from images buffer
            $this->pdf->Image('*'.$src, $x, $y, 0, $maxHeight, '', $url, 'T', false, 300, '', false, false, 0, 'R T', false, false, false);
            return array($maxWidth, $maxHeight, null);
        }*/

        if (!$src) {
            return false;
        }
        if (array_key_exists($src, $downloadedImages)) {
            $fileData = $downloadedImages[$src];
        } else {
            $fileData = file_get_contents($src);
        }
        if ($fileData) {
            $downloadedImages[$src] = $fileData;

            $imagesize = getimagesizefromstring($fileData);

            if (!$imagesize) {
                $imagesize = getimagesize($src);
            }

            if (!$imagesize) {
                return false;
            }

            $blockW = $maxWidth;

            // WIDTH is MAIN dimension
            $imW = ($imagesize[0] <= $maxWidth ? $imagesize[0] : $maxWidth);
            $imKoef = $imW / $imagesize[0];
            $imH = round($imagesize[1] * $imKoef);

            if ($maxHeight && $imH > $maxHeight) {
                $imH = $maxHeight;
                $koef = $imH / $maxHeight;
                $imW = round($imW * $koef);
            }

            $rColor = random_int(10, 240);
            $gColor = random_int(10, 240);
            $bColor = random_int(10, 240);
//            $this->pdf->Rect($x, $y, $maxWidth, $maxHeight, 'S', [], array($rColor, $gColor, $bColor)); // for debugging
            // why horizontal align is not working????!!!!
            // hack with 'template' to align them to right!
            $templateId = $this->pdf->startTemplate($maxWidth, $maxHeight);
            $img = $this->pdf->Image('@' . $fileData, 0, 0, $maxWidth, $maxHeight, '', $url, 'T', true, 300, 'R', false, false, 0, 'R T', $hide, false, false);
            $this->pdf->endTemplate();
            $this->pdf->printTemplate($templateId, $x, $y);

            return array($imW, $imH, $img);
        }

        return false;

    }

    // danger function. can return not correct result, because html is very different
    public function getCountLinesFromHtml($html)
    {
        $html = trim($html);
        if (!$html) {
            return 0;
        }
        $dom = new DOMDocument;
        $dom->loadHTML($html);
        $allElements = $dom->getElementsByTagName('*');
        $allElementTags = array();
        foreach($allElements as $element) {
            if(array_key_exists($element->tagName, $allElementTags)) {
                $allElementTags[$element->tagName] += 1;
            } else {
                $allElementTags[$element->tagName] = 1;
            }
        }
        // which tags create new lines
        $tags = ['p', 'br', 'div', 'li', 'ol'];
        $resultCount = 0;
        foreach ($tags as $tag) {
            $resultCount += @$allElementTags[$tag];
        }

        return $resultCount;
    }

    public function addHeadLine($headlineText, $x, $y, $w = 0, $h = 0, $fileSize = null, $withLine = true, $align = 'L', $linkToWebBlockView = '')
    {
        global $CFG;
        $headlineText = utf8_decode($headlineText);
        if ($fileSize === null) {
            $fileSize = $this->mainFontSize + 2;
        }
        $this->pdf->SetFont($this->mainFontName, 'B', $fileSize);
        $textHeight = $this->pdf->getStringHeight($w, strip_tags($headlineText));
        $headerTopMargin = 5;
        $this->pdf->MultiCell($w, $h, $headlineText, 0, $align, true, 1, $x, $y + $headerTopMargin, false, 0, false, true, 0, 'T', false);
        $this->setDefaultFont();
        // add line
        if ($withLine) {
            $yLine = $y + $textHeight + $headerTopMargin;
            $textHeight += 3;
            $style = array('width' => 0.5, 'cap' => 'round', 'join' => 'round', 'dash' => '0', 'phase' => 0, 'color' => array(200));
            $this->pdf->Line($x, $yLine, $x + $w, $yLine, $style);
            $this->pdf->SetLineStyle($style);
            $this->pdf->Circle($x, $yLine, 0.5);
            $this->pdf->Circle($x + $w, $yLine, 0.5);
        }
        // add link to the web view
        if ($linkToWebBlockView) {
            /*$this->pdf->Image($CFG->wwwroot.'/blocks/exaport/pix/link_external32.png',
                    $x + $w - 5, $y + $headerTopMargin + ($textHeight / 12), 0, $textHeight / 2, '', $linkToWebBlockView
            );*/
            $linkIcon = '<img src="'.$CFG->wwwroot.'/blocks/exaport/pix/link_external32.png" />';
            $link = '<a href="'.$linkToWebBlockView.'" style="text-decoration: none;" target="_blank">'.$linkIcon.'</a>';
            $this->pdf->writeHTMLCell($textHeight / 1.5, 0, $x + $w - 5, $y + $headerTopMargin + ($textHeight / 12), $link);
        }

        $textHeight += $headerTopMargin;
        return $textHeight;
    }

    public function addLinkToBlock($link, $x, $y)
    {
        $linkHeight = $this->pdf->getStringHeight(100, 'link');
        $link = '<a href="'.$link.'" target="_blank" style="text-decoration: none;">link</a>';
        $this->pdf->writeHTMLCell(0, 0, $x, $y, $link);
//        $linkHeight = 15;
        return $linkHeight;
    }

    public function addSubHeadLine($headlineText, $x, $y, $w = 0, $h = 0)
    {
        $this->pdf->SetFont($this->mainFontName, 'B', $this->mainFontSize);
        $textHeight = $this->pdf->getStringHeight($w, strip_tags($headlineText));
        $this->pdf->MultiCell($w, $h, $headlineText, 0, 'L', true, 1, $x, $y, false, 0, false, true, 0, 'T', false);
        $this->setDefaultFont();
        return $textHeight;
    }

    public function setDefaultFont()
    {
        $this->pdf->SetFont($this->mainFontName, '', $this->mainFontSize);
        $this->pdf->SetTextColor(30, 30, 30);
    }

    public function convertHtmlToPdfHtml($html)
    {
//        if (strpos($html, 'FOTOLADENFABRIK') !== false) {
//            echo '<textarea>';
//            echo $html;
//            echo '</textarea>';
//        }

        $text = format_text($html, FORMAT_HTML);
        $text = trim($text);
//        $text = utf8_decode($text);
        $text = mb_convert_encoding($text, 'HTML-ENTITIES', 'UTF-8');
        $text = preg_replace("/(\s){2,}/", " ", $text); // many spaces to single
        $text = preg_replace("/> </", "><", $text); // spaces between tags - important for pdf

        // div to span - because div will be used for additional linebreak
//        $text = preg_replace("/<(\/?)div\b((?:[^>\"']|\"[^\"]*\"|'[^']*')*)>/", "<$1span$2>", $text); // full changed
        $text = preg_replace("/<div\b((?:[^>\"']|\"[^\"]*\"|'[^']*')*)>/", "<span$1>", $text); // start tag
        $text = preg_replace("/<\/?div>/", "</span><br>", $text); // end tag - add <br>
//        $text = preg_replace("/<strong\b((?:[^>\"']|\"[^\"]*\"|'[^']*')*)>/", "<b$1>", $text); // start tag
//        $text = preg_replace("/<\/?strong>/", "</b>", $text); // end tag - add <br>
        $dom = new DOMDocument;
        // for leaving html wrappers (<html><body>) - wrong with umlauts and other...
//        $fragment = $dom->createDocumentFragment();
//        $fragment->appendXML($text);
//        $dom->appendChild($fragment)
        $dom->loadHTML($text, LIBXML_HTML_NODEFDTD);
        $allElements = $dom->getElementsByTagName('*');
        foreach ($allElements as $element) {
            /*                    if ($element->hasAttribute('width')) {
                                    if ($element->getAttribute('width') > $columnWidth) {
                                        $element->setAttribute('width', $columnWidth); // needed to convert in mm
                                    }
                                }*/
            $element->removeAttribute('height');
            $element->removeAttribute('width');
            $element->removeAttribute('style');
            $element->removeAttribute('class');
        }
        // remove empty tags
//        $xpath = new DOMXPath($dom);
//        foreach( $xpath->query('//*[not(node())]') as $node) {
//            $node->parentNode->removeChild($node);
//        }

        $text = $dom->saveHTML();

        // remove html wrappers
        $trim_off_front = strpos($text,'<body>') + 6;
        $trim_off_end = (strrpos($text,'</body>')) - strlen($text);
        $text = substr($text, $trim_off_front, $trim_off_end);
        $text = preg_replace("/(\r?\n){1,}/", "", $text); // delete linebreaks
        $text = trim($text);
        // if full text is wrapped with some tag - remove this wrapping:
        $wrapped = true;
        do {
            preg_match('/^<(\w+)(.*?\>)(.*)(\<\/\w+\>)$/i', $text, $matches);
            if ($matches) {
                if ('</'.$matches[1].'>' == $matches[4] && !in_array($matches[1], ['b', 'strong', 'i'])) {
                    $text = $matches[3];
                } else {
                    $wrapped = false;
                }
            }
            else {
                $wrapped = false;
            }
        } while ($wrapped);
        // br to linebreaks and than trim - so we will delete last br's
        $text = str_ireplace(array("<br />","<br>","<br/>"), "\r\n", $text);
        $text = trim($text);
        // sometimes in the end of the text we have non-closed tags - remove them
        $text = $this->closeNonClosedHtmlTags($text);

        // wrap full text with single P
//        $text = '<p>'.$text.'</p>';


        // for debug
//        if (strpos($text, 'FOTOLADENFABRIK') !== false) {
//            echo '<textarea>';
//            echo $text;
//            echo '</textarea>';
//        }
        return $text;
    }

    public function closeNonClosedHtmlTags($html)
    {
        preg_match_all('#<([a-z]+)(?: .*)?(?<![/|/ ])>#iU', $html, $result);
        $openedtags = $result[1];
        preg_match_all('#</([a-z]+)>#iU', $html, $result);

        $closedtags = $result[1];
        $len_opened = count($openedtags);

//        echo "<pre>debug:<strong>reportlib.php:1125</strong>\r\n"; print_r($openedtags); echo '</pre>';  // !!!!!!!!!! delete it
//        echo "<pre>debug:<strong>reportlib.php:1125</strong>\r\n"; print_r($closedtags); echo '</pre>';  // !!!!!!!!!! delete it

        if (count($closedtags) == $len_opened) {
            return $html; // all tags are closed!
        }
        $openedtags = array_reverse($openedtags);
        for ($i = 0; $i < $len_opened; $i++) {
            // ignore tags, which does not need to be closed
            if (in_array($openedtags[$i], ['br', 'img', 'area', 'base', 'col', 'command', 'embed', 'hr', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'])) {
                continue;
            }
            if (!in_array($openedtags[$i], $closedtags)) {
                $html .= '</'.$openedtags[$i].'>';
            } else {
                unset($closedtags[array_search($openedtags[$i], $closedtags)]);
            }
        }
        return $html;
    }

    public function writeHTMLCellReturnHeight($columnWidth, $x, $y, $text, $align = 'J')
    {
        $htmlHeight = 0;
        $currentPageId = $this->pdf->getPage();
        $yBeforeHtml = $this->pdf->GetY();
        echo "<pre>debug:<strong>reportlib.php:1191</strong>\r\n"; print_r($this->pdf->getStringHeight(80, $text)); echo '</pre>'; // !!!!!!!!!! delete it
        $this->pdf->writeHTMLCell($columnWidth, 0, $x, $y, $text, 0, 1, true, true, $align, true);
        $yAfterHtml = $this->pdf->GetY();
        $newPageId = $this->pdf->getPage();
        $pagesKoef = $newPageId - $currentPageId;
        if ($pagesKoef == 0) {
            // no page changed
            $htmlHeight = $yAfterHtml - $yBeforeHtml;
//            $this->pageAdded = false;
        }
        echo "<pre>debug:<strong>reportlib.php:1195</strong>\r\n"; print_r($yBeforeHtml); echo '</pre>'; // !!!!!!!!!! delete it
        echo "<pre>debug:<strong>reportlib.php:1195</strong>\r\n"; print_r($yAfterHtml); echo '</pre>'; // !!!!!!!!!! delete it
        if ($htmlHeight < 0) {
            // sometimes pdf lib does not know about changed page (why?)
            // in this case $htmlHeight is < 0
            $htmlHeight = $yAfterHtml;
            $this->pageAdded = true;
        }
        if ($pagesKoef >= 1 || $htmlHeight < 0) {
            // pages added
            $pageHeight = $this->pdf->getPageDimensions($this->firstPageForMainReportData)['hk'] - $this->pdf->getPageDimensions($this->firstPageForMainReportData)['bm'] - $this->pdf->getPageDimensions($this->firstPageForMainReportData)['tm']; // from first page?
            $htmlHeight = $pageHeight - $yBeforeHtml + $yAfterHtml + ($pageHeight * ($pagesKoef - 1));
            // return page before inserting - real positioning will be changed later - in 'increaseBlockY' function
            $this->pdf->setPage($currentPageId);
            $this->pageAdded = true;
//            $this->pdf->SetY($yBeforeHtml, false);

//            $this->addDeveloperInfo($yAfterHtml, 3, $this->pdf->GetY());
//            $this->addDeveloperInfo($htmlHeight, 50, $this->pdf->GetY());
//            $this->addDeveloperInfo($newPageId, 100, $this->pdf->GetY());

        }
        // strange very big height: s decrease it on $this->verticalMarginAfterBlock
//        $htmlHeight -= $this->verticalMarginAfterBlock;

        return $htmlHeight;
    }

    public function addDefaultPage()
    {
        $this->pdf->AddPage($this->orientation, $this->format, true);
    }

    public function addFirstPageHeader()
    {

        $this->pdf->SetFont($this->mainFontName, 'B', $this->mainFontSize);

        $y = $this->firstPageTopMargin;
        $headHeight = 0;
        $pageParams = $this->pdf->getPageDimensions(1);
        $title = trim($this->getViewMetaData()->name);
        if ($title) {
            $headHeight += $this->addHeadLine($title, $this->pageRightMargin, $y, $pageParams['wk'] - $pageParams['lm'] - $pageParams['rm'], 0, 18, false, 'R');
            $y = $this->increaseBlockY($y, $headHeight);
        }
        $description = trim($this->getViewMetaData()->description);
        if ($description) {
            $description = $this->convertHtmlToPdfHtml($description);
//            echo "<pre>debug:<strong>reportlib.php:1058</strong>\r\n"; print_r($pageParams); echo '</pre>'; exit; // !!!!!!!!!! delete it
            $headHeight += $this->writeHTMLCellReturnHeight($pageParams['wk'] - $pageParams['lm'] - $pageParams['rm'], $this->pageRightMargin, $y, $description, 'R');
            $y = $this->increaseBlockY($y, $headHeight);
        }

        $this->increaseY($y);
        $this->setDefaultFont();

    }

    public function fillViewMetaData($view)
    {
        $this->pdf->fillMetaData($view);
    }

    public function getViewMetaData()
    {
        return $this->pdf->getViewMetaData();
    }

    public function getWorkingPage()
    {
        return $this->pdf->getWorkingPage();
    }

    public function setWorkingPage($page)
    {
        $this->pdf->setWorkingPage($page);
    }

    public function addDeveloperInfo($text, $x = null, $y = null)
    {
        // get current position
        $currentY = $this->pdf->GetY();
        $currentX = $this->pdf->GetX();
        // developer text style
        $this->pdf->SetTextColor(255, 0, 0);
        if ($x !== null) {
            $this->pdf->SetX($x);
        }
        if ($y !== null) {
            $this->pdf->SetY($y, false);
        }
        $this->pdf->Cell(200, 0, $text);
        // return font to default
        $this->setDefaultFont();
        // return to before position
        $this->pdf->SetX($currentX);
        $this->pdf->SetY($currentY, false);
    }


}



